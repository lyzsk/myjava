package cn.sichu.myjava.september2021.dynamicprogramming;

/**
 * 91. 解码方法 @see<a href = "https://leetcode-cn.com/problems/decode-ways/">91. 解码方法</a>
 * <p>
 * 题目描述
 * <p>
 * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 * 
 * <pre>
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * </pre>
 * 
 * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
 * <ul>
 * <li>"AAJF" ，将消息分组为 (1 1 10 6)
 * <li>"KJF" ，将消息分组为 (11 10 6)
 * </ul>
 * 
 * 注意，消息不能分组为 (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
 * <p>
 * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
 * <p>
 * 题目数据保证答案肯定是一个 32 位 的整数。
 * <p>
 * 解法
 * <p>
 * 假设 dp[i] 表示字符串 s 的前 i 个字符 s[1..i] 的解码方法数。
 * <p>
 * 考虑最后一次解码中使用了 s 中的哪些字符：
 * <ul>
 * <li>第一种情况是我们使用了一个字符，即 s[i] 进行解码，那么只要 s[i]≠0，它就可以被解码成 A∼I 中的某个字母。由于剩余的前 i-1 个字符的解码方法数为 dp[i-1]，所以 dp[i] = dp[i-1]。
 * <li>第二种情况是我们使用了两个字符，即 s[i-1] 和 s[i] 进行编码。与第一种情况类似，s[i-1] 不能等于 0，并且 s[i-1] 和 s[i] 组成的整数必须小于等于 26，这样它们就可以被解码成 J∼Z
 * 中的某个字母。由于剩余的前 i-2 个字符的解码方法数为 dp[i-2]，所以 dp[i] = dp[i-2]。
 * </ul>
 * 将上面的两种状态转移方程在对应的条件满足时进行累加，即可得到 dp[i]的值。在动态规划完成后，最终的答案即为 dp[n]。
 * <p>
 * 由于 dp[i] 的值仅与 dp[i-1] 和 dp[i-2] 有关，因此可以不定义 dp 数组，可以仅使用三个变量进行状态转移。
 * 
 * @author sichu
 * @date 2021/09/27
 */
public class NumDecodings {
    public int numDecodings(String s) {
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (s.charAt(i - 1) != '0') {
                dp[i] += dp[i - 1];
            }
            if (i > 1 && s.charAt(i - 2) != '0' && ((s.charAt(i - 2) - '0') * 10 + s.charAt(i - 1) - '0') <= 26) {
                dp[i] += dp[i - 2];
            }
        }
        return dp[n];
    }
}
